// Generated by CoffeeScript 1.6.3
(function() {
  var Video;

  Video = (function() {
    function Video(video) {
      this.video = video;
      this.id = this.video.id;
      this.name = this.video.name;
      this.path = this.video.path;
      this.format = this.video.format;
      this.time = this.video.time;
      this.poster = this.video.poster;
      this.duration = this.video.duration;
      this.play_count = this.video.play_count;
      this.barrage = this.video.barrage;
      this.barrage_count = this.video.barrage_count;
    }

    Video.prototype.save = function(callback) {
      var _this = this;
      callback = callback || function() {};
      if (global.db) {
        return global.db.collection('video', function(err, collection) {
          if (err) {
            console.log(err);
            return callback(err);
          }
          return collection.insert(_this.video, function(err, v) {
            if (err) {
              return callback(err);
            }
            return callback(err, _this);
          });
        });
      }
    };

    Video.prototype.incPlayCount = function() {
      var _this = this;
      if (global.db) {
        return global.db.collection('video', function(err, collection) {
          if (collection) {
            return collection.update({
              id: _this.id
            }, {
              "$inc": {
                "play_count": 1
              }
            });
          }
        });
      }
    };

    Video.findOne = function(id, callback) {
      callback = callback || function() {};
      if (global.db) {
        return global.db.collection('video', function(err, collection) {
          if (err) {
            console.log(err);
            return callback(err);
          }
          return collection.findOne({
            id: parseInt(id)
          }, function(err, v) {
            if (err) {
              return callback(err, v);
            }
            return callback(err, new Video(v));
          });
        });
      }
    };

    Video.find = function(from, to, callback) {
      callback = callback || function() {};
      if (global.db) {
        return global.db.collection('video', function(err, collection) {
          if (err) {
            console.log(err);
            return callback(err);
          }
          return collection.find({}, {
            limit: to,
            skip: from,
            fields: {
              'barrage': 0
            },
            sort: [['time', 'desc'], ['barrage.time', 'desc']]
          }).toArray(function(err, result) {
            var video, videos, _i, _len;
            if (err) {
              return callback(err, result);
            }
            videos = [];
            for (_i = 0, _len = result.length; _i < _len; _i++) {
              video = result[_i];
              videos.push(new Video(video));
            }
            return callback(err, videos);
          });
        });
      }
    };

    Video.addBarrage = function(id, barrage, callback) {
      var _this = this;
      callback = callback || function() {};
      callback();
      if (id && barrage && global.db) {
        return global.db.collection('video', function(err, collection) {
          if (err) {
            return callback(err);
          }
          collection.update({
            id: id
          }, {
            "$push": {
              "barrage": barrage
            }
          });
          return collection.update({
            id: id
          }, {
            "$inc": {
              "barrage_count": 1
            }
          });
        });
      }
    };

    return Video;

  })();

  module.exports = Video;

}).call(this);
